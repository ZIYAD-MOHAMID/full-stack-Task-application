// This is your Prisma schema file,
generator client {
    provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    todos         Todo[]
    categories    Category[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Todo App Models

model Category {
    id        String   @id @default(cuid())
    name      String
    color     String   @default("#3b82f6") // Default blue color
    icon      String?  // Optional icon name
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    todos     Todo[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([name, userId]) // User can't have duplicate category names
}

model Todo {
    id          String    @id @default(cuid())
    title       String
    description String?
    status      String    @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED, CANCELLED
    priority    String    @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT
    dueDate     DateTime?
    completedAt DateTime?
    userId      String
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    categoryId  String?
    category    Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
    tags        TodoTag[]
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    @@index([userId])
    @@index([status])
    @@index([priority])
    @@index([dueDate])
}

model Tag {
    id    String    @id @default(cuid())
    name  String    @unique
    color String    @default("#6b7280") // Default gray color
    todos TodoTag[]
}

model TodoTag {
    todoId String
    tagId  String
    todo   Todo   @relation(fields: [todoId], references: [id], onDelete: Cascade)
    tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

    @@id([todoId, tagId])
}
